{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"master.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(344667, 15)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store_Dept           0\n",
       "Date                 0\n",
       "Weekly_Sales         0\n",
       "IsHoliday            0\n",
       "Temperature          0\n",
       "Fuel_Price           0\n",
       "MarkDown1       270480\n",
       "MarkDown2       278599\n",
       "MarkDown3       276008\n",
       "MarkDown4       278273\n",
       "MarkDown5       270138\n",
       "CPI                  0\n",
       "Unemployment         0\n",
       "Type                 0\n",
       "Size                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Weekly_Sales</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Fuel_Price</th>\n",
       "      <th>MarkDown1</th>\n",
       "      <th>MarkDown2</th>\n",
       "      <th>MarkDown3</th>\n",
       "      <th>MarkDown4</th>\n",
       "      <th>MarkDown5</th>\n",
       "      <th>CPI</th>\n",
       "      <th>Unemployment</th>\n",
       "      <th>Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>74187.000000</td>\n",
       "      <td>66068.000000</td>\n",
       "      <td>68659.000000</td>\n",
       "      <td>66394.000000</td>\n",
       "      <td>74529.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>16011.033071</td>\n",
       "      <td>57.391070</td>\n",
       "      <td>3.278793</td>\n",
       "      <td>7377.990937</td>\n",
       "      <td>5520.011830</td>\n",
       "      <td>2812.494829</td>\n",
       "      <td>3867.350763</td>\n",
       "      <td>4841.675275</td>\n",
       "      <td>170.260421</td>\n",
       "      <td>8.119909</td>\n",
       "      <td>136807.198011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22859.611439</td>\n",
       "      <td>18.644742</td>\n",
       "      <td>0.454502</td>\n",
       "      <td>9695.184239</td>\n",
       "      <td>11806.737391</td>\n",
       "      <td>13457.720905</td>\n",
       "      <td>8176.212908</td>\n",
       "      <td>5046.201077</td>\n",
       "      <td>38.767201</td>\n",
       "      <td>1.865077</td>\n",
       "      <td>60944.571069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-4988.940000</td>\n",
       "      <td>-2.060000</td>\n",
       "      <td>2.472000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>-265.760000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.460000</td>\n",
       "      <td>135.160000</td>\n",
       "      <td>126.064000</td>\n",
       "      <td>4.125000</td>\n",
       "      <td>34875.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2100.335000</td>\n",
       "      <td>43.820000</td>\n",
       "      <td>2.843000</td>\n",
       "      <td>1842.420000</td>\n",
       "      <td>96.520000</td>\n",
       "      <td>5.900000</td>\n",
       "      <td>319.840000</td>\n",
       "      <td>1844.030000</td>\n",
       "      <td>131.940807</td>\n",
       "      <td>7.082000</td>\n",
       "      <td>93638.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7638.860000</td>\n",
       "      <td>58.060000</td>\n",
       "      <td>3.263000</td>\n",
       "      <td>4879.040000</td>\n",
       "      <td>1053.980000</td>\n",
       "      <td>35.490000</td>\n",
       "      <td>1100.930000</td>\n",
       "      <td>3429.820000</td>\n",
       "      <td>182.238988</td>\n",
       "      <td>7.951000</td>\n",
       "      <td>140167.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>20179.490000</td>\n",
       "      <td>71.240000</td>\n",
       "      <td>3.669000</td>\n",
       "      <td>9006.210000</td>\n",
       "      <td>5524.490000</td>\n",
       "      <td>203.990000</td>\n",
       "      <td>3380.280000</td>\n",
       "      <td>5996.690000</td>\n",
       "      <td>211.406287</td>\n",
       "      <td>8.622000</td>\n",
       "      <td>202505.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>693099.360000</td>\n",
       "      <td>100.140000</td>\n",
       "      <td>4.294000</td>\n",
       "      <td>88646.760000</td>\n",
       "      <td>104519.540000</td>\n",
       "      <td>141630.610000</td>\n",
       "      <td>67474.850000</td>\n",
       "      <td>37581.270000</td>\n",
       "      <td>225.367254</td>\n",
       "      <td>14.313000</td>\n",
       "      <td>219622.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Weekly_Sales    Temperature     Fuel_Price     MarkDown1  \\\n",
       "count  344667.000000  344667.000000  344667.000000  74187.000000   \n",
       "mean    16011.033071      57.391070       3.278793   7377.990937   \n",
       "std     22859.611439      18.644742       0.454502   9695.184239   \n",
       "min     -4988.940000      -2.060000       2.472000      0.500000   \n",
       "25%      2100.335000      43.820000       2.843000   1842.420000   \n",
       "50%      7638.860000      58.060000       3.263000   4879.040000   \n",
       "75%     20179.490000      71.240000       3.669000   9006.210000   \n",
       "max    693099.360000     100.140000       4.294000  88646.760000   \n",
       "\n",
       "           MarkDown2      MarkDown3     MarkDown4     MarkDown5  \\\n",
       "count   66068.000000   68659.000000  66394.000000  74529.000000   \n",
       "mean     5520.011830    2812.494829   3867.350763   4841.675275   \n",
       "std     11806.737391   13457.720905   8176.212908   5046.201077   \n",
       "min      -265.760000      -1.000000      0.460000    135.160000   \n",
       "25%        96.520000       5.900000    319.840000   1844.030000   \n",
       "50%      1053.980000      35.490000   1100.930000   3429.820000   \n",
       "75%      5524.490000     203.990000   3380.280000   5996.690000   \n",
       "max    104519.540000  141630.610000  67474.850000  37581.270000   \n",
       "\n",
       "                 CPI   Unemployment           Size  \n",
       "count  344667.000000  344667.000000  344667.000000  \n",
       "mean      170.260421       8.119909  136807.198011  \n",
       "std        38.767201       1.865077   60944.571069  \n",
       "min       126.064000       4.125000   34875.000000  \n",
       "25%       131.940807       7.082000   93638.000000  \n",
       "50%       182.238988       7.951000  140167.000000  \n",
       "75%       211.406287       8.622000  202505.000000  \n",
       "max       225.367254      14.313000  219622.000000  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 344667 entries, 0 to 344666\n",
      "Data columns (total 15 columns):\n",
      "Store_Dept      344667 non-null object\n",
      "Date            344667 non-null object\n",
      "Weekly_Sales    344667 non-null float64\n",
      "IsHoliday       344667 non-null bool\n",
      "Temperature     344667 non-null float64\n",
      "Fuel_Price      344667 non-null float64\n",
      "MarkDown1       74187 non-null float64\n",
      "MarkDown2       66068 non-null float64\n",
      "MarkDown3       68659 non-null float64\n",
      "MarkDown4       66394 non-null float64\n",
      "MarkDown5       74529 non-null float64\n",
      "CPI             344667 non-null float64\n",
      "Unemployment    344667 non-null float64\n",
      "Type            344667 non-null object\n",
      "Size            344667 non-null int64\n",
      "dtypes: bool(1), float64(10), int64(1), object(3)\n",
      "memory usage: 37.1+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Store_Dept', 'Date', 'Weekly_Sales', 'IsHoliday', 'Temperature',\n",
      "       'Fuel_Price', 'MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4',\n",
      "       'MarkDown5', 'CPI', 'Unemployment', 'Type', 'Size'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Store_Dept     Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n",
      "0        1_1   2/5/10      24924.50      False        42.31       2.572   \n",
      "1        1_1  2/12/10      46039.49       True        38.51       2.548   \n",
      "2        1_1  2/19/10      41595.55      False        39.93       2.514   \n",
      "3        1_1  2/26/10      19403.54      False        46.63       2.561   \n",
      "4        1_1   3/5/10      21827.90      False        46.50       2.625   \n",
      "\n",
      "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
      "0        NaN        NaN        NaN        NaN        NaN  211.096358   \n",
      "1        NaN        NaN        NaN        NaN        NaN  211.242170   \n",
      "2        NaN        NaN        NaN        NaN        NaN  211.289143   \n",
      "3        NaN        NaN        NaN        NaN        NaN  211.319643   \n",
      "4        NaN        NaN        NaN        NaN        NaN  211.350143   \n",
      "\n",
      "   Unemployment Type    Size  \n",
      "0         8.106    A  151315  \n",
      "1         8.106    A  151315  \n",
      "2         8.106    A  151315  \n",
      "3         8.106    A  151315  \n",
      "4         8.106    A  151315  \n"
     ]
    }
   ],
   "source": [
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[['Store','Dept']] = df.Store_Dept.str.split(\"_\",expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Store_Dept     Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n",
      "0        1_1   2/5/10      24924.50      False        42.31       2.572   \n",
      "1        1_1  2/12/10      46039.49       True        38.51       2.548   \n",
      "2        1_1  2/19/10      41595.55      False        39.93       2.514   \n",
      "3        1_1  2/26/10      19403.54      False        46.63       2.561   \n",
      "4        1_1   3/5/10      21827.90      False        46.50       2.625   \n",
      "\n",
      "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
      "0        NaN        NaN        NaN        NaN        NaN  211.096358   \n",
      "1        NaN        NaN        NaN        NaN        NaN  211.242170   \n",
      "2        NaN        NaN        NaN        NaN        NaN  211.289143   \n",
      "3        NaN        NaN        NaN        NaN        NaN  211.319643   \n",
      "4        NaN        NaN        NaN        NaN        NaN  211.350143   \n",
      "\n",
      "   Unemployment Type    Size Store Dept  \n",
      "0         8.106    A  151315     1    1  \n",
      "1         8.106    A  151315     1    1  \n",
      "2         8.106    A  151315     1    1  \n",
      "3         8.106    A  151315     1    1  \n",
      "4         8.106    A  151315     1    1  \n"
     ]
    }
   ],
   "source": [
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A    176279\n",
       "B    133752\n",
       "C     34636\n",
       "Name: Type, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Type\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    317972\n",
       "True      26695\n",
       "Name: IsHoliday, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"IsHoliday\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Missing percentage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MarkDown2</th>\n",
       "      <td>278599</td>\n",
       "      <td>80.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MarkDown4</th>\n",
       "      <td>278273</td>\n",
       "      <td>80.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MarkDown3</th>\n",
       "      <td>276008</td>\n",
       "      <td>80.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MarkDown1</th>\n",
       "      <td>270480</td>\n",
       "      <td>78.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MarkDown5</th>\n",
       "      <td>270138</td>\n",
       "      <td>78.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Total     %\n",
       "MarkDown2  278599  80.8\n",
       "MarkDown4  278273  80.7\n",
       "MarkDown3  276008  80.1\n",
       "MarkDown1  270480  78.5\n",
       "MarkDown5  270138  78.4"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total = df.isnull().sum().sort_values(ascending=False)\n",
    "percent_1 = df.isnull().sum()/df.isnull().count()*100\n",
    "percent_2 = (round(percent_1, 1)).sort_values(ascending=False)\n",
    "missing_data = pd.concat([total, percent_2], axis=1, keys=['Total', '%'])\n",
    "missing_data.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a23f98828>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEGCAYAAABPdROvAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAZBUlEQVR4nO3df7RdZX3n8fdHEKVWBCRgSmCCNtoipalkIRXrUBENVgG7/AH9QYq2KR1ox7b+wNYWxw6zHKt1pCoKGgWrUir+yGJRMTKs0nZACUoh+KMJiHJJIEFEESwa+M4f57n1kJzkHrLvuSc39/1a66yz93c/+5zvZt2VL89+nvPsVBWSJO2ox4w7AUnS7GYhkSR1YiGRJHViIZEkdWIhkSR1svu4ExiH/fbbrxYuXDjuNCRpVrn++uvvrqp5W8bnZCFZuHAhq1evHncakjSrJPnWoLi3tiRJnVhIJEmdWEgkSZ1YSCRJnVhIJEmdjLSQJFmRZGOSNX2xv09yQ3vdluSGFl+Y5Id9x97fd84RSW5Ksi7JuUnS4vsmWZVkbXvfZ5TXI0na2qh7JB8BlvYHqupVVbW4qhYDlwKf6jt8y+Sxqjq9L34esBxY1F6Tn3kWcGVVLQKubPuSpBk00kJSVVcD9ww61noVrwQ+sb3PSDIf2KuqrqnemvcXASe1wycCF7btC/vikqQZMs4fJP4KcFdVre2LHZLkK8D3gTdX1T8DBwITfW0mWgzggKraAFBVG5Lsv60vS7KcXq+Ggw8+ePquQtJO6Q1veAN33nknT3nKU3j7298+7nR2aeMsJKfwyN7IBuDgqvpOkiOAzyR5JpAB5z7qp3FV1fnA+QBLlizxaV7SLu7OO+/kjjvuGHcac8JYCkmS3YFfB46YjFXVg8CDbfv6JLcAT6fXA1nQd/oCYH3bvivJ/NYbmQ9snIn8JUk/Ma7pvy8Avl5V/3nLKsm8JLu17afSG1S/td26ui/JUW1c5VTgs+20lcCytr2sLy5JmiGjnv77CeAa4BlJJpK8ph06ma0H2Z8H3Jjk34BPAqdX1eRA/R8AHwTWAbcA/9jibwOOS7IWOK7tS5Jm0EhvbVXVKduI/86A2KX0pgMPar8aOGxA/DvAsd2ylHYt337rL4w7hZ3C5nv2BXZn8z3f8r8JcPBf3jSyz/aX7ZKkTiwkkqROLCSSpE4sJJKkTubko3Yl7fr2e/zDwOb2rlGykEjaJb3u8HvHncKc4a0tSVInFhJJUicWEklSJxYSSVInFhJJUifO2tIO88FBksBCog58cJAksJDskCNef9G4U9gpPPHu+9gN+Pbd9/nfBLj+r08ddwrSWDhGIknqxB6JdtjDezzhEe+S5iYLiXbY/YteOO4UJO0EvLUlSerEQiJJ6sRCIknqxEIiSepkpIUkyYokG5Os6Yu9JckdSW5orxf3HXtTknVJvpHkRX3xpS22LslZffFDknwxydokf59kj1FejyRpa6PukXwEWDog/q6qWtxelwMkORQ4GXhmO+d9SXZLshvwXuB44FDglNYW4H+3z1oEfBd4zUivRpK0lZEWkqq6GrhnyOYnAhdX1YNV9U1gHXBke62rqlur6kfAxcCJSQI8H/hkO/9C4KRpvQBJ0pTGNUZyZpIb262vfVrsQOD2vjYTLbat+JOBe6tq8xbxgZIsT7I6yepNmzZN13VI0pw3jkJyHvA0YDGwAXhni2dA29qB+EBVdX5VLamqJfPmzXt0GUuStmnGf9leVXdNbie5ALis7U4AB/U1XQCsb9uD4ncDeyfZvfVK+ttLkmbIjPdIkszv230ZMDmjayVwcpLHJTkEWAR8CbgOWNRmaO1Bb0B+ZVUVcBXw8nb+MuCzM3ENkqSfGGmPJMkngGOA/ZJMAGcDxyRZTO821G3A7wNU1c1JLgG+CmwGzqiqh9rnnAlcAewGrKiqm9tXvBG4OMn/BL4CfGiU1yNJ2tpIC0lVnTIgvM1/7KvqHOCcAfHLgcsHxG+lN6tLkjQm/rJdktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1MlIC0mSFUk2JlnTF/vrJF9PcmOSTyfZu8UXJvlhkhva6/195xyR5KYk65KcmyQtvm+SVUnWtvd9Rnk9kqStjbpH8hFg6RaxVcBhVXU48O/Am/qO3VJVi9vr9L74ecByYFF7TX7mWcCVVbUIuLLtS5Jm0EgLSVVdDdyzRezzVbW57V4LLNjeZySZD+xVVddUVQEXASe1wycCF7btC/vikqQZMu4xklcD/9i3f0iSryT5pyS/0mIHAhN9bSZaDOCAqtoA0N7339YXJVmeZHWS1Zs2bZq+K5CkOW5shSTJnwObgY+10Abg4Kr6JeBPgI8n2QvIgNPr0X5fVZ1fVUuqasm8efN2NG1J0hZ2H8eXJlkGvAQ4tt2uoqoeBB5s29cnuQV4Or0eSP/trwXA+rZ9V5L5VbWh3QLbOFPXIEnqmfEeSZKlwBuBE6rqgb74vCS7te2n0htUv7XdsrovyVFtttapwGfbaSuBZW17WV9ckjRDRtojSfIJ4BhgvyQTwNn0Zmk9DljVZvFe22ZoPQ94a5LNwEPA6VU1OVD/B/RmgO1Jb0xlclzlbcAlSV4DfBt4xSivR5K0tZEWkqo6ZUD4Q9toeylw6TaOrQYOGxD/DnBslxwlSd2Me9aWJGmWs5BIkjqxkEiSOhmqkCR5RZIntu03J/lUkmeNNjVJ0mwwbI/kL6rqviTPBV5EbzmS80aXliRpthi2kDzU3n8NOK+qPgvsMZqUJEmzybCF5I4kHwBeCVye5HGP4lxJ0i5s2GLwSuAKYGlV3QvsC7x+ZFlJkmaNoQpJW8pkI/DcFtoMrB1VUpKk2WPYWVtn01sfa/IhVI8F/m5USUmSZo9hb229DDgBuB+gqtYDTxxVUpKk2WPYQvKjttx7ASR5wuhSkiTNJsMWkkvarK29k/we8AXggtGlJUmaLYZa/beq3pHkOOD7wDOAv6yqVSPNTJI0Kwy9jHwrHBYPSdIjbLeQJLmPwc9HD1BVtddIspIkzRrbLSRV5cwsSdJ2PaonJCbZH3j85H5VfXvaM5IkzSrD/iDxhCRrgW8C/wTcxk+emy5JmsOGnf77V8BRwL9X1SH0npP+ryPLSpI0awxbSH5cVd8BHpPkMVV1FbB4hHlJkmaJYQvJvUl+Grga+FiSd9NbuHG7kqxIsjHJmr7YvklWJVnb3vdp8SQ5N8m6JDf2P4ExybLWfm2SZX3xI5Lc1M45N0mGvXBJ0vQYtpCcCDwA/DHwOeAW4KVDnPcRYOkWsbOAK6tqEXBl2wc4HljUXstpT2BMsi9wNvBs4Ejg7Mni09os7ztvy++SJI3YsMvI319VDwNPovfr9n9tt7qmOu9q4J4twifSe1Qv7f2kvvhF1XMtveVY5tN7tO+qqrqnqr5L70eRS9uxvarqmrYO2EV9nyVJmiHbLSRJLktyWNueD6wBXg1clOS1O/idB1TVBoD2vn+LHwjc3tduosW2F58YEN/WtSxPsjrJ6k2bNu1g6pKkLU3VIzmkqibHN06j1zN4Kb0ZXK+e5lwGjW/UDsQHqqrzq2pJVS2ZN2/eDqYoSdrSVIXkx33bxwKXA1TVfcDDO/idd7XezWQvZ2OLTwAH9bVbAKyfIr5gQFySNIOmKiS3J/nDJC8DnkVvoJ0ke9J7SuKOWAlMzrxaBny2L35qm711FPC9duvrCuCFSfZpg+wvBK5ox+5LclSbrXVq32dJkmbIVEukvAZ4K/AC4FVVdW+LHwV8eKoPT/IJ4BhgvyQT9GZfvY3e801eA3wbeEVrfjnwYmAdvRlipwFU1T1J/gq4rrV7a1VNDuD/Ab2ZYXvS+6W9v7aXpBk21aKNG4HTB8SvAq6a3E/yt1X1hwPanbKNjz52QNsCzthGHiuAFQPiq4HDtpW/JGn0hv0dyVSOnqbPkSTNMtNVSCRJc5SFRJLUyXQVEte4kqQ5atjnkUw1oP3uachFkjQLDdsjeX+SLyX5b0n23vJgVX1ketOSJM0Wwy7a+FzgN+n9wnx1ko8nOW6kmUmSZoWhx0iqai3wZuCNwH8Fzk3y9SS/PqrkJEk7v2HHSA5P8i7ga8DzgZdW1c+37XeNMD9J0k5uqiVSJr0H+CDwZ1X1w8lgVa1P8uaRZCZJmhWGKiRV9bztHPvo9KUjSZpttltIktzE4Gd8hN7yWIePJCtJ0qwxVY/kJTOShSRp1truYHtVfauqvgUcOrndFzt+ZlKUJO3Mhp3++xdJnj+5k+SNwImjSUmSNJsMO2vrBOCyJK8HlgI/12KSpDlu2Flbdyc5AfgCcD3w8vYgKknSHDfVrK37eOSsrT2ApwIvT1JVtdcok5Mk7fymetTuE2cqEUnS7DTsEilJ8ltJ/qLtH5TkyNGmJkmaDYadtfU+4JeB32j7PwDeO5KMJEmzyrCF5NlVdQbwHwBV9V164yU7JMkzktzQ9/p+ktcmeUuSO/riL+47501J1iX5RpIX9cWXtti6JGftaE6SpB0z7PTfHyfZjTbwnmQe8PCOfmlVfQNY3D5rN+AO4NPAacC7quod/e2THAqcDDwT+BngC0me3g6/FzgOmACuS7Kyqr66o7lJkh6dYXsk59L7h/6AJOcA/wL8r2nK4VjglvZr+W05Ebi4qh6sqm8C64Aj22tdVd1aVT8CLsYfSkrSjBr2dyQfS3I9vX/0A5xUVV+bphxOBj7Rt39mklOB1cCftttoBwLX9rWZaDGA27eIP3vQlyRZDiwHOPjgg6cnc0nS8E9IBPYDHqiq9wB3Jzmk65cn2YPeL+T/oYXOA55G77bXBuCdk00HnF7biW8drDq/qpZU1ZJ58+Z1yluS9BND9UiSnA0sAZ4BfBh4LPB3wNEdv/944MtVdRfA5Hv7zguAy9ruBL3nxU9aAKxv29uKS5JmwLA9kpfR6zncD70nIwLT8WPFU+i7rZVk/hbfuaZtrwROTvK41hNaBHwJuA5YlOSQ1rs5ubWVJM2QYWdt/aiqKsnkrK0ndP3iJD9Fb7bV7/eF355kMb3bU7dNHquqm5NcAnwV2AycUVUPtc85E7gC2A1YUVU3d81NkjS8YQvJJUk+AOyd5PeAVwMXdPniqnoAePIWsd/eTvtzgHMGxC8HLu+SiyRpx021aONrgX8F/g/wq8D36Y2T/GVVrRp9epKknd1UPZIFwLvpPX/kRuD/0Sss1484L0nSLDHV6r+vg/+cprsEeA7ttlaSe6vq0NGnKEnamQ07RrInsBfwpPZaD9w0qqQkSbPHVGMk59Nb3+o+4Iv0bm39Tfu1uSRJU/6O5GDgccCd9BZWnADuHXVSkqTZY6oxkqVJQq9X8hzgT4HDktwDXFNVZ89AjpKkndiUYyRVVcCaJPcC32uvl9BbeddCIklz3FRjJH9ErydyNPBjelN/rwFW4GC7JImpeyQLgU8Cf1xVG0afjiRptplqjORPZioRSdLs9GieRyJJ0lYsJJKkTiwkkqROLCSSpE4sJJKkTiwkkqROLCSSpE4sJJKkTiwkkqROxlZIktyW5KYkNyRZ3WL7JlmVZG1736fFk+TcJOuS3JjkWX2fs6y1X5tk2biuR5LmqnH3SH61qhZX1ZK2fxZwZVUtAq5s+wDHA4vaazlwHvQKD70ViJ9NW414svhIkmbGuAvJlk4ELmzbFwIn9cUvqp5rgb2TzAdeBKyqqnvaUxtXAUtnOmlJmsvGWUgK+HyS65Msb7EDJlcZbu/7t/iBwO1950602LbiW0myPMnqJKs3bdo0jZchSXPblA+2GqGjq2p9kv2BVUm+vp22GRCr7cS3DladD5wPsGTJkoFtJEmP3th6JFW1vr1vBD5Nb4zjrnbLiva+sTWfAA7qO30BsH47cUnSDBlLIUnyhCRPnNwGXgisAVYCkzOvlgGfbdsrgVPb7K2jgO+1W19XAC9Msk8bZH9hi0mSZsi4bm0dAHw6yWQOH6+qzyW5DrgkyWuAbwOvaO0vB14MrAMeAE4DqKp7kvwVcF1r99aqumfmLkOSNJZCUlW3Ar84IP4d4NgB8QLO2MZnraD3DHlJ0hjsbNN/JUmzjIVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1ImFRJLUiYVEktSJhUSS1MlYCkmSg5JcleRrSW5O8t9b/C1J7khyQ3u9uO+cNyVZl+QbSV7UF1/aYuuSnDWO65GkuWz3MX3vZuBPq+rLSZ4IXJ9kVTv2rqp6R3/jJIcCJwPPBH4G+EKSp7fD7wWOAyaA65KsrKqvzshVSJLGU0iqagOwoW3fl+RrwIHbOeVE4OKqehD4ZpJ1wJHt2LqquhUgycWtrYVEkmbI2MdIkiwEfgn4YgudmeTGJCuS7NNiBwK395020WLbig/6nuVJVidZvWnTpmm8Akma28ZaSJL8NHAp8Nqq+j5wHvA0YDG9Hss7J5sOOL22E986WHV+VS2pqiXz5s3rnLskqWdcYyQkeSy9IvKxqvoUQFXd1Xf8AuCytjsBHNR3+gJgfdveVlySNAPGNWsrwIeAr1XV3/TF5/c1exmwpm2vBE5O8rgkhwCLgC8B1wGLkhySZA96A/IrZ+IaJEk94+qRHA38NnBTkhta7M+AU5Ispnd76jbg9wGq6uYkl9AbRN8MnFFVDwEkORO4AtgNWFFVN8/khUjSXDeuWVv/wuDxjcu3c845wDkD4pdv7zxJ0miNfdaWJGl2s5BIkjqxkEiSOrGQSJI6sZBIkjqxkEiSOrGQSJI6sZBIkjqxkEiSOrGQSJI6sZBIkjqxkEiSOrGQSJI6sZBIkjqxkEiSOrGQSJI6sZBIkjqxkEiSOrGQSJI6sZBIkjqxkEiSOtklCkmSpUm+kWRdkrPGnY8kzSWzvpAk2Q14L3A8cChwSpJDx5uVJM0ds76QAEcC66rq1qr6EXAxcOKYc5KkOWP3cScwDQ4Ebu/bnwCevWWjJMuB5W33B0m+MQO5zQX7AXePO4mdQd6xbNwpaGv+fU46O9PxKf9lUHBXKCSD/uvUVoGq84HzR5/O3JJkdVUtGXce0iD+fc6MXeHW1gRwUN/+AmD9mHKRpDlnVygk1wGLkhySZA/gZGDlmHOSpDlj1t/aqqrNSc4ErgB2A1ZU1c1jTmsu8Xahdmb+fc6AVG01nCBJ0tB2hVtbkqQxspBIkjqZ9WMkml5JHgJu6gudVFW3baPtQuCyqjps9JlJkOTJwJVt9ynAQ8Cmtn9k+1GyZpiFRFv6YVUtHncS0iBV9R1gMUCStwA/qKp39LdJEnrjvw/PfIZzk7e2NKUkC5P8c5Ivt9dzBrR5ZpIvJbkhyY1JFrX4b/XFP9DWRpOmVZKfTbImyfuBLwMHJbm37/jJST7Ytg9I8qkkq9vf5lHjyntXYSHRlvZs/+jfkOTTLbYROK6qngW8Cjh3wHmnA+9uvZklwESSn2/tj27xh4DfHP0laI46FPhQVf0ScMd22p0LvL394v2VwAdnIrldmbe2tKVBt7YeC7wnyWQxePqA864B/jzJAuBTVbU2ybHAEcB1vbsN7EmvKEmjcEtVXTdEuxcAz2h/kwD7JNmzqn44utR2bRYSDeOPgbuAX6TXi/2PLRtU1ceTfBH4NeCKJL9Lbx20C6vqTTOZrOas+/u2H+aR6/A9vm87ODA/rby1pWE8CdjQBi9/m94KAo+Q5KnArVV1Lr0lag6nN7vm5Un2b232TTJw9VBpOrW/1e8mWZTkMcDL+g5/AThjcqf1tNWBhUTDeB+wLMm19G5r3T+gzauANUluAH4OuKiqvgq8Gfh8khuBVcD8GcpZeiPwOXr/QzPRFz8DOLpNCvkq8HvjSG5X4hIpkqRO7JFIkjqxkEiSOrGQSJI6sZBIkjqxkEiSOrGQSDsgyQ+mOH5bkv369o9JctkU5/xOkve07dOTnDqgzcIka3Y0b2kU/GW7tBOqqvePOwdpWPZIpA6SzE9ydVvkck2SXxninH2TfKb9IO7aJIcPaPOWJK9r20ck+bck1/DIX2QPXJU5yUeTnNjX7mNJTpiWC5YGsJBI3fwGcEVb6PIXgRv6jl01uZIyj1xh9n8AX6mqw4E/Ay6a4js+DPxRVf3yFvFtrcr8QeA0gCRPAp4DXP6or0wakoVE6uY64LT2kKVfqKr7+o79alUtbkXmd/vizwU+ClBV/xd4cvsHfystvndV/VMLfbTv8GOBC5LcBPwDvWXUaW1/tq1xdgpwaVVt7nid0jZZSKQOqupq4Hn0nn/x0UED5ANkQGxbaxVlO8f6V2VeAuzRd+yj9J79chq9Ho00MhYSqYO2mvHGqroA+BDwrCFOu5r2gK8kxwB3V9X3BzWsqnuB7yV5bgv1Pxhse6syfwR4bfuMm4e9HmlHOGtL6uYY4PVJfgz8ABimR/IW4MNtReQHgGVTtD8NWJHkAeCKvvj7gEuTvAK4ir5VmavqriRfAz4z5HVIO8zVf6VdUJKfAm4CnlVV3xt3Ptq1eWtL2sUkeQHwdeBvLSKaCfZIJEmd2CORJHViIZEkdWIhkSR1YiGRJHViIZEkdfL/AdrZUb2LEMapAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.barplot(x='IsHoliday', y='Weekly_Sales', data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a23a2bf98>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Type', y='Weekly_Sales', data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([   69.,     0.,     0.,    68.,   138.,   273.,   551.,   477.,\n",
       "         1254.,  1502.,  1871.,  3457.,  5073.,  4611.,  5440.,  6186.,\n",
       "         6528.,  7464.,  9479.,  8451.,  8738., 10592.,  9207., 14179.,\n",
       "        12841., 13007., 12088., 13057., 11122., 11590., 11995., 11778.,\n",
       "        13366., 12734., 15268., 15982., 11020., 10645.,  9264.,  8363.,\n",
       "         6735.,  9557.,  8125.,  6590.,  5489.,  4673.,  1947.,   770.,\n",
       "          687.,   366.]),\n",
       " array([-2.0600e+00, -1.6000e-02,  2.0280e+00,  4.0720e+00,  6.1160e+00,\n",
       "         8.1600e+00,  1.0204e+01,  1.2248e+01,  1.4292e+01,  1.6336e+01,\n",
       "         1.8380e+01,  2.0424e+01,  2.2468e+01,  2.4512e+01,  2.6556e+01,\n",
       "         2.8600e+01,  3.0644e+01,  3.2688e+01,  3.4732e+01,  3.6776e+01,\n",
       "         3.8820e+01,  4.0864e+01,  4.2908e+01,  4.4952e+01,  4.6996e+01,\n",
       "         4.9040e+01,  5.1084e+01,  5.3128e+01,  5.5172e+01,  5.7216e+01,\n",
       "         5.9260e+01,  6.1304e+01,  6.3348e+01,  6.5392e+01,  6.7436e+01,\n",
       "         6.9480e+01,  7.1524e+01,  7.3568e+01,  7.5612e+01,  7.7656e+01,\n",
       "         7.9700e+01,  8.1744e+01,  8.3788e+01,  8.5832e+01,  8.7876e+01,\n",
       "         8.9920e+01,  9.1964e+01,  9.4008e+01,  9.6052e+01,  9.8096e+01,\n",
       "         1.0014e+02]),\n",
       " <a list of 50 Patch objects>)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.Temperature, bins = 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([37724., 30477., 18715., 27103., 12861., 31493.,  3481.,  7866.,\n",
       "          207.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,\n",
       "            0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,\n",
       "            0.,     0.,     0.,   411.,  6858.,  1368.,  3450.,  6737.,\n",
       "        11260.,  7118.,  4129.,  5881.,  1119.,     0.,  1799.,  8107.,\n",
       "         1984.,  5385., 23480., 14604., 27276., 11095., 13566., 10326.,\n",
       "         4583.,  4204.]),\n",
       " array([126.064     , 128.05006507, 130.03613015, 132.02219522,\n",
       "        134.0082603 , 135.99432537, 137.98039044, 139.96645552,\n",
       "        141.95252059, 143.93858567, 145.92465074, 147.91071581,\n",
       "        149.89678089, 151.88284596, 153.86891104, 155.85497611,\n",
       "        157.84104118, 159.82710626, 161.81317133, 163.79923641,\n",
       "        165.78530148, 167.77136655, 169.75743163, 171.7434967 ,\n",
       "        173.72956178, 175.71562685, 177.70169192, 179.687757  ,\n",
       "        181.67382207, 183.65988715, 185.64595222, 187.63201729,\n",
       "        189.61808237, 191.60414744, 193.59021252, 195.57627759,\n",
       "        197.56234266, 199.54840774, 201.53447281, 203.52053789,\n",
       "        205.50660296, 207.49266803, 209.47873311, 211.46479818,\n",
       "        213.45086326, 215.43692833, 217.4229934 , 219.40905848,\n",
       "        221.39512355, 223.38118863, 225.3672537 ]),\n",
       " <a list of 50 Patch objects>)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.CPI, bins = 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[['Store','Dept']] = df.Store_Dept.str.split(\"_\",expand=True,)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Store_Dept     Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n",
      "0        1_1   2/5/10      24924.50      False        42.31       2.572   \n",
      "1        1_1  2/12/10      46039.49       True        38.51       2.548   \n",
      "2        1_1  2/19/10      41595.55      False        39.93       2.514   \n",
      "3        1_1  2/26/10      19403.54      False        46.63       2.561   \n",
      "4        1_1   3/5/10      21827.90      False        46.50       2.625   \n",
      "\n",
      "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
      "0        NaN        NaN        NaN        NaN        NaN  211.096358   \n",
      "1        NaN        NaN        NaN        NaN        NaN  211.242170   \n",
      "2        NaN        NaN        NaN        NaN        NaN  211.289143   \n",
      "3        NaN        NaN        NaN        NaN        NaN  211.319643   \n",
      "4        NaN        NaN        NaN        NaN        NaN  211.350143   \n",
      "\n",
      "   Unemployment Type    Size Store Dept  \n",
      "0         8.106    A  151315     1    1  \n",
      "1         8.106    A  151315     1    1  \n",
      "2         8.106    A  151315     1    1  \n",
      "3         8.106    A  151315     1    1  \n",
      "4         8.106    A  151315     1    1  \n"
     ]
    }
   ],
   "source": [
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scatter(df, column):\n",
    "    plt.figure()\n",
    "    plt.scatter(df[column] , df['Weekly_Sales'])\n",
    "    plt.ylabel('Weekly_Sales')\n",
    "    plt.xlabel(column)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZgAAAEGCAYAAABYV4NmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAdOklEQVR4nO3dfZRdVZnn8e+PIqELFBMg0JAXg9PpKC8tLzUhbRxtQZKgQspeotBtE5Fl1ig60vSkO7iww4i0cdHjC9N2NAJNMtBCVAxZdqCmDDCOCkiFIOGl0ykQSCVICpKCCFFC8cwfZ1e4Ke69dSu5575U/T5r3XXPec4+Z+9yXXxy9tlnb0UEZmZm1XZAvRtgZmYjkxOMmZnlwgnGzMxy4QRjZma5cIIxM7NcHFjvBjSSI444IqZOnVrvZpiZNZV169Y9FxETBsedYApMnTqVrq6uejfDzKypSHqqWNxdZGZmlgsnGDMzy4UTjJmZ5SLXBCNpuqQHCz4vSrpE0mGSOiVtSt/jU3lJukZSt6SHJJ1ScK35qfwmSfML4qdK2pDOuUaSUrxoHWZmVhu5JpiI2BgRJ0XEScCpwMvAj4BFwNqImAasTfsAZwHT0mcBsBSyZAEsBk4DZgCLCxLG0lR24Ly5KV6qDjMzq4FadpGdATweEU8B84DlKb4caE/b84AVkbkXGCfpaGAO0BkR2yNiB9AJzE3HDo2IeyKbtXPFoGsVq8Osaaxav4VZS+7k2EX/xqwld7Jq/ZZ6N8msYrUcpnwe8L20fVREPAMQEc9IOjLFJwKbC87pSbFy8Z4i8XJ17EXSArI7IKZMmbJvf5lZDlat38Jlt25g1+5+ALb07eKyWzcA0H7yxHKnmjWEmtzBSBoLnAN8f6iiRWKxD/GKRcSyiGiLiLYJE97wnpBZ3VzdsXFPchmwa3c/V3dsrFOLzIanVl1kZwEPRMSzaf/Z1L1F+t6W4j3A5ILzJgFbh4hPKhIvV4dZU9jat2tYcbNGU6sEcz6vd48BrAYGRoLNB24riF+QRpPNBF5I3VwdwGxJ49PD/dlARzq2U9LMNHrsgkHXKlaHWVM4ZlzrsOJmjSb3BCPpYOBM4NaC8BLgTEmb0rElKb4GeALoBr4LfAYgIrYDVwL3p8+XUgzg08C16ZzHgduHqMOsKSycM53WMS17xVrHtLBwzvQ6tchseOQlk1/X1tYWnovMGsmq9Vu4umMjW/t2ccy4VhbOme4H/NZwJK2LiLbBcU92adbA2k+e6IRiTctTxZiZWS6cYMzMLBdOMGZmlgsnGDMzy4UTjJmZ5cKjyMwamIcpWzNzgjFrUJ7s0pqdu8jMGpQnu7Rm5wRj1qA82aU1OycYswblyS6t2TnBmDWohXOmM6Zl7yWPxrTIk11a03CCMWtg/f1Rdt+skTnBmDWoK1Y/wmuDYq+luFkzcIIxa1B9u3YPK27WaJxgzMwsF04wZg1q/MFjhhU3azROMGYNavHZxxcdRbb47OPr1CKz4fFUMWYNamA6GM9FZs0q9wQjaRxwLXACEMAngY3ALcBU4EngoxGxQ5KAbwIfAF4GPhERD6TrzAcuT5f9ckQsT/FTgRuAVmAN8PmICEmHFasj37/WrLq8ZLI1s1p0kX0TuCMi3g68E3gMWASsjYhpwNq0D3AWMC19FgBLAVKyWAycBswAFksan85ZmsoOnDc3xUvVYWZmNZBrgpF0KPAe4DqAiHglIvqAecDyVGw50J625wErInMvME7S0cAcoDMitqe7kE5gbjp2aETcExEBrBh0rWJ1mJlZDeR9B/M2oBf4F0nrJV0r6RDgqIh4BiB9H5nKTwQ2F5zfk2Ll4j1F4pSpw8zMaiDvBHMgcAqwNCJOBl6ifFeVisRiH+IVk7RAUpekrt7e3uGcamZmZeSdYHqAnoi4L+3/gCzhPJu6t0jf2wrKTy44fxKwdYj4pCJxytSxl4hYFhFtEdE2YcKEffojzczsjXJNMBHxG2CzpIHpX88AHgVWA/NTbD5wW9peDVygzEzghdS91QHMljQ+PdyfDXSkYzslzUwj0C4YdK1idZiZWQ3U4j2YzwE3SRoLPAFcSJbYVkq6CHgaODeVXUM2RLmbbJjyhQARsV3SlcD9qdyXImJ72v40rw9Tvj19AJaUqMPMzGpA2eArA2hra4uurq56N8PMrKlIWhcRbYPjnirGzMxy4QRjZma5cIIxM7NcOMGYmVkunGDMzCwXTjBmZpYLJxgzM8uFE4yZmeXCCcbMzHLhBGNmZrlwgjEzs1w4wZiZWS6cYMzMLBdOMGZmlgsnGDMzy4UTjJmZ5cIJxszMcuEEY2ZmuXCCMTOzXDjBmJlZLnJPMJKelLRB0oOSulLsMEmdkjal7/EpLknXSOqW9JCkUwquMz+V3yRpfkH81HT97nSuytVhZma1Uas7mPdFxEkR0Zb2FwFrI2IasDbtA5wFTEufBcBSyJIFsBg4DZgBLC5IGEtT2YHz5g5Rh5mZ1UC9usjmAcvT9nKgvSC+IjL3AuMkHQ3MATojYntE7AA6gbnp2KERcU9EBLBi0LWK1WFmZjVQiwQTwP+RtE7SghQ7KiKeAUjfR6b4RGBzwbk9KVYu3lMkXq6OvUhaIKlLUldvb+8+/olmZjbYgTWoY1ZEbJV0JNAp6d/LlFWRWOxDvGIRsQxYBtDW1jasc83MrLTc72AiYmv63gb8iOwZyrOpe4v0vS0V7wEmF5w+Cdg6RHxSkThl6jAzsxrINcFIOkTSmwe2gdnAw8BqYGAk2HzgtrS9GrggjSabCbyQurc6gNmSxqeH+7OBjnRsp6SZafTYBYOuVawOMzOrgby7yI4CfpRGDh8I/GtE3CHpfmClpIuAp4FzU/k1wAeAbuBl4EKAiNgu6Urg/lTuSxGxPW1/GrgBaAVuTx+AJSXqqLpV67dwdcdGtvbt4phxrSycM532kycOfaKZ2QimbPCVQfYMpqura1jnrFq/hctu3cCu3f17Yq1jWvjKn5/oJGNmo4KkdQWvoezhN/n309UdG/dKLgC7dvdzdcfGOrXIzKwxOMHsp619u4YVNzMbLZxg9tMx41qHFTczGy2cYPbTwjnTaR3TslesdUwLC+dMr1OLzMwaQy1etBzRBh7kexSZmdnenGCqoP3kiU4oZmaDuIvMzMxyUVGCkXRuwRv5l0u6tXCtFjMzs8EqvYP5YkTslPRusqnzl5PWajEzMyum0gQz8CbhB4GlEXEbMDafJpmZ2UhQaYLZIuk7wEeBNZIOGsa5ZmY2ClWaJD5KNqPx3IjoAw4DFubWKjMza3oVJZiIeJlsPZV3p9CrwKa8GmVmZs2vovdgJC0G2oDpwL8AY4AbgVn5Na15XL5qA9+7bzP9EbRInH/aZL7cfmK9m2VmVleVdpF9GDgHeAn2rFL55rwa1UwuX7WBG+99mv607EF/BDfe+zSXr9pQ55aZmdVXpQnmlcgWjgnYszqlAd+7b/Ow4mZmo0WlCWZlGkU2TtKngJ8A382vWc2jv8SCbaXiZmajRUXPYCLiHyWdCbxI9hzm7yOiM9eWNYkWqWgyacmWiTbbL16O25pZxZNdpoTipDLI+adN5sZ7ny4aN9sfq9ZvYeH3f8Xu17J/wGzp28XC7/8KwEnGmkLZLjJJOyW9WOSzU9KLlVYiqUXSekk/TvvHSrpP0iZJt0gam+IHpf3udHxqwTUuS/GNkuYUxOemWLekRQXxonVU25fbT+TjM6fsuWNpkfj4zCkeRWb77YrVj+xJLgN2vxZcsfqROrXIbHjK3sFERLVGin0eeAw4NO1/Ffh6RNws6dvARWRzm10E7IiIP5J0Xir3MUnHAecBxwPHAD+R9MfpWt8CzgR6gPslrY6IR8vUUXVfbj/RCcWqrm/X7mHFzRrNsKZ7kXSkpCkDnwrPmUQ2h9m1aV/A6cAPUpHlQHvanpf2ScfPSOXnATdHxO8j4tdANzAjfboj4omIeAW4GZg3RB1Vt2r9FmYtuZNjF/0bs5bcyar1W/KqysysaVQ6Xf85kjYBvwb+L/AkcHuFdXwD+FvgtbR/ONAXEa+m/R5goEN5IrAZIB1/IZXfEx90Tql4uToG/20LJHVJ6urt7a3wT3rdqvVbuOzWDWzp20WQ9ZNfdusGJxnbbwePKf6fZ6m4WaOp9Jd6JTAT+I+IOBY4A/j5UCdJ+hCwLSLWFYaLFI0hjlUr/sZgxLKIaIuItgkTJhQrUtbVHRvZtbt/r9iu3f1c3bFx2NcyK3TQmJZhxc0aTaUJZndEPA8cIOmAiLgLOKmC82YB50h6kqz76nSyO5pxkgae/0wCtqbtHmAyQDr+FmB7YXzQOaXiz5Wpo6q29O0aVtysUn0vl3gGUyJu1mgqTTB9kt4E/BS4SdI3ySa8LCsiLouISRExlewh/Z0R8ZfAXcBHUrH5wG1pe3XaJx2/M80gsBo4L40yOxaYBvwSuB+YlkaMjU11rE7nlKqjqkq97+L3YGx/HTOudVhxs0ZTaYKZB7wM/DVwB/A4cPZ+1Pt3wKWSusmel1yX4tcBh6f4pcAigIh4BFgJPJrqvzgi+tMzls+SLSXwGLAylS1XR1X5TX7Ly8I502kd1B3WOqaFhXOm16lFZsNT6Zv8LwFIGk/2Nv/DqcusYhFxN3B32n6CbATY4DK/A84tcf5VwFVF4muANUXiReuoNlH84Y7vX2x/DbxM6Tf5rVkN9aLljyWdkLaPBh4GPgmskHRJDdrX8Erdp/j+xcxGu6G6yI6NiIfT9oVAZ0ScTTai7JO5tsxslPMQeGt2QyWYwuEqZ5C6oiJiJ6+/1zKqHVCiL6xU3KxSHgJvzW6oZzCbJX2ObDjwKWQP2JHUSraq5aj3Wom+sFJxs0ptLTHUvVTcrNEMdQdzEdn8X58APhYRfSk+k2zp5FFv/MHF82ypuFmlDh5b/IXKUnGzRjPUZJfbgP9aJH4X2XsmAEj6XxHxueo3r/H9blAXxlBxs0q9/Erx31CpuFmjqdakRrOqdJ2ms2t38UdRpeJmlfIIRWt2njXPzMxy4QRjZma5qFaC8aBcMzPbS6XrwZwwRJFvVqEtZmY2glR6B/NtSb+U9BlJ4wYfjIgbqtssMzNrdhUlmIh4N/CXZGuvdEn6V0ln5tqyJuE3+S0v41qLv0tVKm7WaCp+BhMRm4DLyabBfy9wjaR/l/TneTWuGfzp2w4bVtysUlecczxjBv1LZcwB4opzjq9Ti8yGp6Lp+iX9Cdlklx8EOoGzI+IBSccA9wC35tfExvbk88Wn7SgVN6uUp+u3ZldRggH+CbgW+EJE7Pl/zojYKunyXFrWJLxksuWp/eSJTijWtCpdcOw9ZY797+o1p/m0SEVXr/SSyWY22pVNMJI2UHrBxoiIP8mlVU3ESyabmRU31B3Mh2rSiibmOxjL06r1W/wMxppW2VFkEfFURDwFHDewXRA7a6iLS/qD9P7MryQ9Iul/pPixku6TtEnSLZLGpvhBab87HZ9acK3LUnyjpDkF8bkp1i1pUUG8aB3V5jsYy4tXtLRmV+kw5S9KOn1gR9LfAfMqOO/3wOkR8U7gJGCupJnAV4GvR8Q0YAfZujOk7x0R8UfA11M5JB0HnEe2Ns1c4J8ltUhqAb5FluyOA85PZSlTR1X5XQXLi1e0tGZXaYI5B/gHSf9F0lXAjBQrKzK/Tbtj0ieA04EfpPhyoD1tz0v7pONnSFKK3xwRv4+IXwPdqQ0zgO6IeCIiXgFuBualc0rVUVW7+4tPy18qblYpr2hpza7SN/mfI0so3wKOAT4SEbsrOTfdaTwIbCN7h+ZxoC8iXk1FeoCBTuWJwOZU56vAC8DhhfFB55SKH16mjqp6qcTiT6XiZpUaV2JV1FJxs0Yz1Ciynew9imws8DbgI5IiIg4dqoKI6AdOSnOY/Qh4R7FiA1WWOFYqXixBliv/BpIWAAsApkyZUqyIWV14tVRrdkMtmfzmalUUEX2S7gZmAuMkHZjuMCYBW1OxHrL5znokHQi8BdheEB9QeE6x+HNl6hjcrmXAMoC2tjY/mbeG4dVSrdlVOl2/JH1c0hfT/mRJMyo4b8LA7MuSWoH3A48BdwEfScXmA7el7dVpn3T8zoiIFD8vjTI7FpgG/BK4H5iWRoyNJRsIsDqdU6oOMzOrgUof8v8z8KfAX6T935I9jxnK0cBdkh4iSwadEfFjsgkzL5XUTfa85LpU/jrg8BS/FFgEEBGPACuBR4E7gIsjoj/dnXwW6CBLXCtTWcrUYdYUxpd41lIqbtZoKp2L7LSIOEXSeoCI2FHJeyUR8RBwcpH4E2QjwAbHfwecW+JaVwFXFYmvAdZUWodZs1h89vEs/MGv2N3/es/tmBax+GzPpmzNodI7mN3pnZOArOsLcEcwfg/G8tN+8kRmTB2/V2zG1PF+k9+aRqUJ5hqyEWBHpfdgfgb8Q26taiI7f1d8tHapuFmlLl+1gZ8/vn2v2M8f387lqzbUqUVmw1PpezA3AX9LllSeAdoj4vt5NqxZ9JcYd1Yqblapm+59elhxs0ZT8YqWwBHAyxHxT8BzaTSXmeWk1L9R/G8XaxaVDlNeTDYq67IUGgPcmFejzMys+VV6B/NhsqliXoJsJUugai9hmpnZyFNpgnklvbw4MIrskPyaZGZmI0GlCWalpO+QTb/yKeAnwHfza5aZmTW7oSa7vAT4OfAN4H3Ai8B04O8jojP/5pmZWbMa6k3+ScA3gbcDDwG/IEs463Jul5mZNbmhZlP+7wBpWpg24F3AJ4HvSuqLiOPKnW9mZqNXpXORtQKHkk2f/xayqe/9OrGZmZU01DOYZcDxwE7gPrIusq9FxI4atM3MzJrYUKPIpgAHAb8BtpAt/NWXd6PMzKz5DfUMZq4kkd3FvAv4G+AESduBeyJicQ3aaGZmTWjIZzDpBcuHJfUBL6TPh8jWWnGCMTOzooZ6BvPfyO5cZgG7yYYo3wNcjx/ym5lZGUPdwUwFfgD8dUQ8k39zzMxspBjqGcyltWqImZmNLMNZD8bMzKxiuSYYSZMl3SXpMUmPSPp8ih8mqVPSpvQ9PsUl6RpJ3ZIeknRKwbXmp/KbJM0viJ8qaUM655o06q1kHWZmVht538G8CvxNRLwDmAlcLOk4YBGwNiKmAWvTPsBZwLT0WQAshSxZkI1YO400eq0gYSxNZQfOm5vipeowM7MayDXBRMQzEfFA2t4JPAZMBOYBy1Ox5UB72p4HrIjMvWTLAxwNzAE6I2J7mkWgE5ibjh0aEfek4dQrBl2rWB1mZlYDNXsGI2kqcDLZlDNHDYxKS99HpmITgc0Fp/WkWLl4T5E4ZeoY3K4FkrokdfX29u7rn2dmZoPUJMFIehPwQ+CSiHixXNEisdiHeMUiYllEtEVE24QJE4ZzqpmZlZF7gpE0hiy53BQRt6bws6l7i/S9LcV7gMkFp08im7m5XHxSkXi5OszMrAbyHkUm4DrgsYj4WsGh1cDASLD5wG0F8QvSaLKZwAupe6sDmC1pfHq4PxvoSMd2SpqZ6rpg0LWK1WFmZjVQ6Xow+2oW8FfABkkPptgXgCXASkkXAU8D56Zja4APAN3Ay8CFABGxXdKVwP2p3JciYnva/jRwA9maNbenD2XqMDOzGsg1wUTEzyj+nATgjCLlA7i4xLWuJ5sDbXC8CzihSPz5YnWYmVlt+E1+MzPLhROMmZnlwgnGzMxy4QRjZma5cIIxM7NcOMGYmVkunGDMzCwXTjBmZpYLJxgzM8uFE4yZmeXCCcbMzHLhBGNmZrlwgjEzs1w4wZiZWS6cYMzMLBdOMGZmlou8V7Q0M7MGdObX7mbTtpf27E878hA6L/2zqtbhOxgzs1FmcHIB2LTtJc782t1VrccJxsxslBmcXIaK76tcE4yk6yVtk/RwQewwSZ2SNqXv8SkuSddI6pb0kKRTCs6Zn8pvkjS/IH6qpA3pnGskqVwdZmZWO3nfwdwAzB0UWwSsjYhpwNq0D3AWMC19FgBLIUsWwGLgNGAGsLggYSxNZQfOmztEHWZmViO5JpiI+CmwfVB4HrA8bS8H2gviKyJzLzBO0tHAHKAzIrZHxA6gE5ibjh0aEfdERAArBl2rWB1mZlYj9XgGc1REPAOQvo9M8YnA5oJyPSlWLt5TJF6ujjeQtEBSl6Su3t7eff6jzMxsb430kF9FYrEP8WGJiGUR0RYRbRMmTBju6WZmVkI9EsyzqXuL9L0txXuAyQXlJgFbh4hPKhIvV4eZmdVIPRLMamBgJNh84LaC+AVpNNlM4IXUvdUBzJY0Pj3cnw10pGM7Jc1Mo8cuGHStYnWYmVmN5Pomv6TvAX8GHCGph2w02BJgpaSLgKeBc1PxNcAHgG7gZeBCgIjYLulK4P5U7ksRMTBw4NNkI9VagdvThzJ1mJlZjeSaYCLi/BKHzihSNoCLS1zneuD6IvEu4IQi8eeL1WFmZrXTSA/5zcxsBHGCMTOzXDjBmJlZLpxgzMwsF04wZmaWCycYMzPLhROMmZnlwgnGzMxy4QRjZma5cIIxM7NcOMGYmVkunGDMzCwXTjBmZpYLJxgzM8uFE4yZmeXCCcbMzHLhBGNmZrlwgjEzs1w4wZiZWS5GdIKRNFfSRkndkhbVuz1mZqPJiE0wklqAbwFnAccB50s6rr6tMjMbPUZsggFmAN0R8UREvALcDMyrc5vMzEaNkZxgJgKbC/Z7UszMzGpgJCcYFYnFGwpJCyR1Serq7e2tQbPMzEaHkZxgeoDJBfuTgK2DC0XEsohoi4i2CRMm1KxxZmYj3UhOMPcD0yQdK2kscB6wus5tMjMbNUZsgomIV4HPAh3AY8DKiHik2vV842MnDStuVin/tiwvTy754LDi++rAql6twUTEGmBNnnW0n5yNG7i6YyNb+3ZxzLhWFs6Zvidutq/827I8VTuZFKOINzz3HrXa2tqiq6ur3s0wM2sqktZFRNvg+IjtIjMzs/pygjEzs1w4wZiZWS6cYMzMLBdOMGZmlguPIisgqRd4aj8ucQTwXJWaY1bIvy3LSzV+W2+NiDdMheIEU0WSuooN1TPbX/5tWV7y/G25i8zMzHLhBGNmZrlwgqmuZfVugI1Y/m1ZXnL7bfkZjJmZ5cJ3MGZmlgsnGDMzy4UTTJVI+rCkkPT2erfFRg5J/ZIelPQrSQ9Iele922Qjg6Q/lHSzpMclPSppjaQ/rmYdTjDVcz7wM7KVM82qZVdEnBQR7wQuA75S7wZZ85Mk4EfA3RHxnyLiOOALwFHVrMcJpgokvQmYBVyEE4zl51BgR70bYSPC+4DdEfHtgUBEPBgR/6+alYzoFS1rqB24IyL+Q9J2SadExAP1bpSNCK2SHgT+ADgaOL3O7bGR4QRgXd6V+A6mOs4Hbk7bN6d9s2oY6CJ7OzAXWJG6N8want+D2U+SDgd6gG1AAC3p+63h/3FtP0n6bUS8qWD/WeDEiNhWx2ZZk5N0BrA4It6TZz2+g9l/HwFWRMRbI2JqREwGfg28u87tshEmjVBsAZ6vd1us6d0JHCTpUwMBSf9Z0nurWYkTzP47n2w0RqEfAn9Rh7bYyNOahik/CNwCzI+I/no3yppb6l35MHBmGqb8CHAFsLWa9biLzMzMcuE7GDMzy4UTjJmZ5cIJxszMcuEEY2ZmuXCCMTOzXHiqGLM6SC/ork27fwj0A71pf0ZEvFKXhplVkYcpm9WZpCuA30bEP9a7LWbV5C4yswYi6SuSLi7Y/6qkz0h6v6S7JK1Ka3d8a2BOMklnSbonrRdzi6RD6vcXmL3OCcassVwLfAJAUgtwLvC9dOw04BLgROAdwDxJRwKLgDMi4hTgIeDzNW6zWVF+BmPWQCLicUk7JZ0IvBX4ZUTsSDcr90bEkwCSbub1+e6OA36RyowlW/jOrO6cYMwaz3VkdzFTge8UxAc/MA1AZGsR/VVNWmY2DO4iM2s8PwTOBk4CflIQnylpSuo6+yjZncovgPdKehuApEMkTat1g82K8R2MWYOJiN9J+inwm4h4reDQL4D/CRwP3A2sjoiQdBFwi6SxqdwXgE21bLNZMR6mbNZgJB0APAi0R8QTKfZ+4LMR0V7XxpkNg7vIzBpIerj/ONlzlSfq3R6z/eE7GDMzy4XvYMzMLBdOMGZmlgsnGDMzy4UTjJmZ5cIJxszMcvH/AT3LZGiczLWlAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter(df, 'Fuel_Price')\n",
    "scatter(df, 'Size')\n",
    "scatter(df, 'CPI')\n",
    "scatter(df, 'Type')\n",
    "scatter(df, 'IsHoliday')\n",
    "scatter(df, 'Unemployment')\n",
    "scatter(df, 'Temperature')\n",
    "scatter(df, 'Store')\n",
    "scatter(df, 'Dept')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x1a212463c8>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x1008 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(18, 14))\n",
    "corr = df.corr()\n",
    "c = plt.pcolor(corr)\n",
    "plt.yticks(np.arange(0.5, len(corr.index), 1), corr.index)\n",
    "plt.xticks(np.arange(0.5, len(corr.columns), 1), corr.columns)\n",
    "fig.colorbar(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Month'] = pd.to_datetime(df['Date']).dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a220e0400>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a281f5358>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Fuel_Price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.IsHoliday = np.multiply(df.IsHoliday, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a21ff05f8>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.IsHoliday)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a26947fd0>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.CPI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a27951128>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Unemployment)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a28869208>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a27174128>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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738f6NJwOp28//77fP/73w90KULIkE0RWjZv3szx48dZuXJloEtpc2rFxTfeeCPQpQghd/oitD311FPs27cPv9/P7bffzsKFC7n55psZP348hYWFREZGMnnyZD7//HOsVivr1q3jww8/ZNu2bVitVhobG7nnnnu48sor2bVrF8899xxarZa0tDQee+wx3n77bd599118Ph/33nsvBQUF/Otf/8Lj8RAdHc3zzz/Pf//3f3P48GHWrl2L0+kkJSWF73//+xw+fJjVq1fzyiuvsGjRIoYPH05ERAQPP/wwDz74IM3NzahUKh5++GFGjhwZ6G+lCBHSpy9C1ieffEJ1dTVvvPEGf/nLX3j++eex2WwATJkyhVdffbVtXZR169aRlpbG3r17AXA4HKxbt44//vGPrF69Gp/PxyOPPMKLL77Ia6+9RlxcHO+++y4AsbGxvPHGG1x00UVYrVZeeeUVXn/9dRwOBwcPHuTOO+8kKyuLu+66q8tarVYr99xzD8888wxr167l8ssvZ/369TzyyCM89thjff/NEmFD7vRFyDp8+DB5eXnk5OQA4PP5qKioAE6ujQIn14A5tbxGdHQ0LpcLgEsuuQS1Wk1SUhImk4mqqirq6uralqd2OBzo9XoGDRpEeno6cHKRLbVazc9//nNMJlPbEgNdObNn9dTzHD58mL179/L+++8D0NTU1CvfDyFAQl+EsIyMDGbMmMGjjz6Kz+fjhRdeICUlBaBt2duunNo/oaamBqfTyaBBg0hOTmbt2rVYLBa2bNlCVFQUxcXFbc918OBBtm/fzptvvklrayv/9m//Bpz8ZXAq4A0GAzU1NW3Xn+7UyowZGRlMnTqVa665htraWt5+++1e+o4IIaEvQtiCBQv44osvyM7OprW1lauuugqTydSjx9bU1HDbbbdhtVp57LHH0Gg03H///fz4xz9GURQsFgtPPfUUxcXFbY9JT09Hp9OxdOlSdDodSUlJ1NTUMG7cOFpbW3n22We58cYbuffee9m9e3fbXxtnuvvuu3nwwQd54403sNvt3HPPPb3y/RACZPSOEB387W9/o6ysjBUrVgS6FCF6nXyQK4QQYUTu9IUQIozInb4QQoQRCX0hhAgjEvpCCBFGJPSFECKMSOgLIUQY+f8MBSBJV8BQNAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Temperature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a281acf60>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Weekly_Sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns=[\"Type\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Store_Dept     Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n",
      "0        1_1   2/5/10      24924.50          0        42.31       2.572   \n",
      "1        1_1  2/12/10      46039.49          1        38.51       2.548   \n",
      "2        1_1  2/19/10      41595.55          0        39.93       2.514   \n",
      "3        1_1  2/26/10      19403.54          0        46.63       2.561   \n",
      "4        1_1   3/5/10      21827.90          0        46.50       2.625   \n",
      "\n",
      "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
      "0        NaN        NaN        NaN        NaN        NaN  211.096358   \n",
      "1        NaN        NaN        NaN        NaN        NaN  211.242170   \n",
      "2        NaN        NaN        NaN        NaN        NaN  211.289143   \n",
      "3        NaN        NaN        NaN        NaN        NaN  211.319643   \n",
      "4        NaN        NaN        NaN        NaN        NaN  211.350143   \n",
      "\n",
      "   Unemployment    Size Store Dept  Month  Type_A  Type_B  Type_C  \n",
      "0         8.106  151315     1    1      2       1       0       0  \n",
      "1         8.106  151315     1    1      2       1       0       0  \n",
      "2         8.106  151315     1    1      2       1       0       0  \n",
      "3         8.106  151315     1    1      2       1       0       0  \n",
      "4         8.106  151315     1    1      3       1       0       0  \n"
     ]
    }
   ],
   "source": [
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a285df978>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Type_A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1f10b400>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Type_B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1fa86358>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.distplot(df.Type_C)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1a1e53b048>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter('Month', 'CPI', data=df) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Store_Dept     Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n",
      "0        1_1   2/5/10      24924.50          0        42.31       2.572   \n",
      "1        1_1  2/12/10      46039.49          1        38.51       2.548   \n",
      "2        1_1  2/19/10      41595.55          0        39.93       2.514   \n",
      "3        1_1  2/26/10      19403.54          0        46.63       2.561   \n",
      "4        1_1   3/5/10      21827.90          0        46.50       2.625   \n",
      "\n",
      "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
      "0        NaN        NaN        NaN        NaN        NaN  211.096358   \n",
      "1        NaN        NaN        NaN        NaN        NaN  211.242170   \n",
      "2        NaN        NaN        NaN        NaN        NaN  211.289143   \n",
      "3        NaN        NaN        NaN        NaN        NaN  211.319643   \n",
      "4        NaN        NaN        NaN        NaN        NaN  211.350143   \n",
      "\n",
      "   Unemployment    Size Store Dept  Month  Type_A  Type_B  Type_C  \n",
      "0         8.106  151315     1    1      2       1       0       0  \n",
      "1         8.106  151315     1    1      2       1       0       0  \n",
      "2         8.106  151315     1    1      2       1       0       0  \n",
      "3         8.106  151315     1    1      2       1       0       0  \n",
      "4         8.106  151315     1    1      3       1       0       0  \n"
     ]
    }
   ],
   "source": [
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x1a242cf198>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(18, 10))\n",
    "corr = df.corr()\n",
    "c = plt.pcolor(corr)\n",
    "plt.yticks(np.arange(0.5, len(corr.index), 1), corr.index)\n",
    "plt.xticks(np.arange(0.5, len(corr.columns), 1), corr.columns)\n",
    "fig.colorbar(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store_Dept           0\n",
       "Date                 0\n",
       "Weekly_Sales         0\n",
       "IsHoliday            0\n",
       "Temperature          0\n",
       "Fuel_Price           0\n",
       "MarkDown1       270480\n",
       "MarkDown2       278599\n",
       "MarkDown3       276008\n",
       "MarkDown4       278273\n",
       "MarkDown5       270138\n",
       "CPI                  0\n",
       "Unemployment         0\n",
       "Size                 0\n",
       "Store                0\n",
       "Dept                 0\n",
       "Month                0\n",
       "Type_A               0\n",
       "Type_B               0\n",
       "Type_C               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import tree\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score,precision_recall_fscore_support\n",
    "from sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix, classification_report, r2_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.naive_bayes import BernoulliNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "df0=pd.read_csv('master.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "df0=df0.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store_Dept      0\n",
       "Date            0\n",
       "Weekly_Sales    0\n",
       "IsHoliday       0\n",
       "Temperature     0\n",
       "Fuel_Price      0\n",
       "MarkDown1       0\n",
       "MarkDown2       0\n",
       "MarkDown3       0\n",
       "MarkDown4       0\n",
       "MarkDown5       0\n",
       "CPI             0\n",
       "Unemployment    0\n",
       "Type            0\n",
       "Size            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df0.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store_Dept</th>\n",
       "      <th>Date</th>\n",
       "      <th>Weekly_Sales</th>\n",
       "      <th>IsHoliday</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Fuel_Price</th>\n",
       "      <th>MarkDown1</th>\n",
       "      <th>MarkDown2</th>\n",
       "      <th>MarkDown3</th>\n",
       "      <th>MarkDown4</th>\n",
       "      <th>MarkDown5</th>\n",
       "      <th>CPI</th>\n",
       "      <th>Unemployment</th>\n",
       "      <th>Type</th>\n",
       "      <th>Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1_1</td>\n",
       "      <td>2/5/10</td>\n",
       "      <td>24924.50</td>\n",
       "      <td>False</td>\n",
       "      <td>42.31</td>\n",
       "      <td>2.572</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>211.096358</td>\n",
       "      <td>8.106</td>\n",
       "      <td>A</td>\n",
       "      <td>151315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1_1</td>\n",
       "      <td>2/12/10</td>\n",
       "      <td>46039.49</td>\n",
       "      <td>True</td>\n",
       "      <td>38.51</td>\n",
       "      <td>2.548</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>211.242170</td>\n",
       "      <td>8.106</td>\n",
       "      <td>A</td>\n",
       "      <td>151315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1_1</td>\n",
       "      <td>2/19/10</td>\n",
       "      <td>41595.55</td>\n",
       "      <td>False</td>\n",
       "      <td>39.93</td>\n",
       "      <td>2.514</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>211.289143</td>\n",
       "      <td>8.106</td>\n",
       "      <td>A</td>\n",
       "      <td>151315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1_1</td>\n",
       "      <td>2/26/10</td>\n",
       "      <td>19403.54</td>\n",
       "      <td>False</td>\n",
       "      <td>46.63</td>\n",
       "      <td>2.561</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>211.319643</td>\n",
       "      <td>8.106</td>\n",
       "      <td>A</td>\n",
       "      <td>151315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1_1</td>\n",
       "      <td>3/5/10</td>\n",
       "      <td>21827.90</td>\n",
       "      <td>False</td>\n",
       "      <td>46.50</td>\n",
       "      <td>2.625</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>211.350143</td>\n",
       "      <td>8.106</td>\n",
       "      <td>A</td>\n",
       "      <td>151315</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Store_Dept     Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n",
       "0        1_1   2/5/10      24924.50      False        42.31       2.572   \n",
       "1        1_1  2/12/10      46039.49       True        38.51       2.548   \n",
       "2        1_1  2/19/10      41595.55      False        39.93       2.514   \n",
       "3        1_1  2/26/10      19403.54      False        46.63       2.561   \n",
       "4        1_1   3/5/10      21827.90      False        46.50       2.625   \n",
       "\n",
       "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
       "0        0.0        0.0        0.0        0.0        0.0  211.096358   \n",
       "1        0.0        0.0        0.0        0.0        0.0  211.242170   \n",
       "2        0.0        0.0        0.0        0.0        0.0  211.289143   \n",
       "3        0.0        0.0        0.0        0.0        0.0  211.319643   \n",
       "4        0.0        0.0        0.0        0.0        0.0  211.350143   \n",
       "\n",
       "   Unemployment Type    Size  \n",
       "0         8.106    A  151315  \n",
       "1         8.106    A  151315  \n",
       "2         8.106    A  151315  \n",
       "3         8.106    A  151315  \n",
       "4         8.106    A  151315  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df0.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df0.drop(columns=['Date','Store_Dept','Weekly_Sales','Type'])\n",
    "y = df0[['Weekly_Sales']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression\n",
      "MSE for LR: 484181845.82\n",
      "R2 score:0.06\n"
     ]
    }
   ],
   "source": [
    "print(\"Linear Regression\")\n",
    "lr = LinearRegression()\n",
    "lr = lr.fit(X_train, y_train)\n",
    "y_pred = lr.predict(X_test)\n",
    "print(\"MSE for LR: %.2f\" %mean_squared_error(y_test,y_pred))\n",
    "print(\"R2 score:%.2f\"%r2_score(y_test,y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# imputed missing with 0(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=df.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store_Dept      0\n",
       "Date            0\n",
       "Weekly_Sales    0\n",
       "IsHoliday       0\n",
       "Temperature     0\n",
       "Fuel_Price      0\n",
       "MarkDown1       0\n",
       "MarkDown2       0\n",
       "MarkDown3       0\n",
       "MarkDown4       0\n",
       "MarkDown5       0\n",
       "CPI             0\n",
       "Unemployment    0\n",
       "Size            0\n",
       "Store           0\n",
       "Dept            0\n",
       "Month           0\n",
       "Type_A          0\n",
       "Type_B          0\n",
       "Type_C          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Store_Dept     Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n",
      "0        1_1   2/5/10      24924.50          0        42.31       2.572   \n",
      "1        1_1  2/12/10      46039.49          1        38.51       2.548   \n",
      "2        1_1  2/19/10      41595.55          0        39.93       2.514   \n",
      "3        1_1  2/26/10      19403.54          0        46.63       2.561   \n",
      "4        1_1   3/5/10      21827.90          0        46.50       2.625   \n",
      "\n",
      "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
      "0        0.0        0.0        0.0        0.0        0.0  211.096358   \n",
      "1        0.0        0.0        0.0        0.0        0.0  211.242170   \n",
      "2        0.0        0.0        0.0        0.0        0.0  211.289143   \n",
      "3        0.0        0.0        0.0        0.0        0.0  211.319643   \n",
      "4        0.0        0.0        0.0        0.0        0.0  211.350143   \n",
      "\n",
      "   Unemployment    Size Store Dept  Month  Type_A  Type_B  Type_C  \n",
      "0         8.106  151315     1    1      2       1       0       0  \n",
      "1         8.106  151315     1    1      2       1       0       0  \n",
      "2         8.106  151315     1    1      2       1       0       0  \n",
      "3         8.106  151315     1    1      2       1       0       0  \n",
      "4         8.106  151315     1    1      3       1       0       0  \n"
     ]
    }
   ],
   "source": [
    "print(df1.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.metrics import mean_squared_error,r2_score\n",
    "from sklearn.naive_bayes import BernoulliNB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# part 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression(without CV df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "X1 = df1.drop(columns=['Date','Store_Dept','Weekly_Sales','Fuel_Price','Type_A','MarkDown1'])\n",
    "y1 = df1[['Weekly_Sales']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(344667, 14) (344667, 1)\n"
     ]
    }
   ],
   "source": [
    "print(X1.shape,y1.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression\n",
      "MSE for LR: 469415877.87\n",
      "R2 score:0.09\n"
     ]
    }
   ],
   "source": [
    "print(\"Linear Regression\")\n",
    "lr = LinearRegression()\n",
    "lr = lr.fit(X_train, y_train)\n",
    "y_pred = lr.predict(X_test)\n",
    "print(\"MSE for LR: %.2f\" %mean_squared_error(y_test,y_pred))\n",
    "print(\"R2 score:%.2f\"%r2_score(y_test,y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## regression with CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3 converting to numpy array\n",
    "Xc = np.array(df1.drop(columns=['Date','Store_Dept','Weekly_Sales','Fuel_Price','Type_A','MarkDown1']).values)\n",
    "yc = np.array(df1['Weekly_Sales'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:   11.3s finished\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Linear Regression\")\n",
    "#lr = LinearRegression()\n",
    "cv_score = cross_validate(LinearRegression(),X= Xc,y =yc,scoring=['r2','neg_mean_squared_error'],cv=10,n_jobs=-1,verbose=2,return_estimator=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fit_time': array([1.82211614, 1.76317215, 1.72946978, 1.71904278, 1.73407602,\n",
       "        1.52488279, 1.35890627, 1.22379994, 1.00489497, 0.74222088]),\n",
       " 'score_time': array([0.09237194, 0.1153667 , 0.1072669 , 0.0819211 , 0.06312013,\n",
       "        0.07286   , 0.07826877, 0.06992102, 0.03982902, 0.03299522]),\n",
       " 'estimator': (LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False),\n",
       "  LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)),\n",
       " 'test_r2': array([ 0.11125947,  0.04849879, -0.08152563,  0.1151608 ,  0.04497465,\n",
       "        -0.00974707,  0.11597521,  0.07036995,  0.05860116,  0.09100185]),\n",
       " 'test_neg_mean_squared_error': array([-7.71454025e+08, -2.78292677e+08, -6.56666124e+08, -6.51183155e+08,\n",
       "        -5.99561480e+08, -3.95798007e+08, -4.47616791e+08, -3.63507082e+08,\n",
       "        -3.26535647e+08, -3.39075469e+08])}"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.05645691919693796\n"
     ]
    }
   ],
   "source": [
    "print(cv_score[\"test_r2\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-482969045.72068036\n"
     ]
    }
   ],
   "source": [
    "print(cv_score[\"test_neg_mean_squared_error\"].mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Knn(without CV df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for KNN: 282105595.14\n",
      "R2 score:0.45\n"
     ]
    }
   ],
   "source": [
    "#print(\"KNN\")\n",
    "knn = KNeighborsRegressor()\n",
    "knn = knn.fit(X_train, y_train)\n",
    "y_pred = knn.predict(X_test)\n",
    "print(\"MSE for KNN: %.2f\" %mean_squared_error(y_test,y_pred))\n",
    "print(\"R2 score:%.2f\"%r2_score(y_test,y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Knn with CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed: 17.4min finished\n"
     ]
    }
   ],
   "source": [
    "print(\"KNN\")\n",
    "cv_score = cross_validate(KNeighborsRegressor(),X= X1,y =y1,scoring=['r2','neg_mean_squared_error'],cv=10,n_jobs=-1,verbose=2,return_estimator=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fit_time': array([413.22391319, 409.21184897, 319.78842878, 433.13361573,\n",
       "        411.37210202, 428.04910493, 434.32508636, 422.06636381,\n",
       "        250.39845395, 173.60083199]),\n",
       " 'score_time': array([10.02867079,  6.85433602,  9.07900715, 12.13327122, 10.67719102,\n",
       "        12.24929905,  9.02103972,  4.95935011,  4.67565203,  5.26217985]),\n",
       " 'estimator': (KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform'),\n",
       "  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                      metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                      weights='uniform')),\n",
       " 'test_r2': array([ 0.47091594,  0.36359113, -0.09143448,  0.43713445,  0.14404622,\n",
       "         0.03163064,  0.36903701,  0.38622713,  0.35536746,  0.28933784]),\n",
       " 'test_neg_mean_squared_error': array([-4.59261184e+08, -1.86135263e+08, -6.62682448e+08, -4.14231831e+08,\n",
       "        -5.37364706e+08, -3.79578882e+08, -3.19481572e+08, -2.39999541e+08,\n",
       "        -2.23598643e+08, -2.65091966e+08])}"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-368742603.49810964\n"
     ]
    }
   ],
   "source": [
    "print(cv_score[\"test_neg_mean_squared_error\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.27558533398048457\n"
     ]
    }
   ],
   "source": [
    "print(cv_score[\"test_r2\"].mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Performance on test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_file=pd.read_csv(\"test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_file[['Store','Dept']] = test_file.Store_Dept.str.split(\"_\",expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_file = pd.get_dummies(test_file, columns=[\"Type\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_file['Month'] = pd.to_datetime(test_file['Date']).dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store_Dept      0\n",
       "Weekly_Sales    0\n",
       "Date            0\n",
       "IsHoliday       0\n",
       "Temperature     0\n",
       "Fuel_Price      0\n",
       "MarkDown1       0\n",
       "MarkDown2       0\n",
       "MarkDown3       0\n",
       "MarkDown4       0\n",
       "MarkDown5       0\n",
       "CPI             0\n",
       "Unemployment    0\n",
       "Size            0\n",
       "Store           0\n",
       "Dept            0\n",
       "Type_A          0\n",
       "Type_B          0\n",
       "Type_C          0\n",
       "Month           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_file.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_file=test_file.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Store_Dept  Weekly_Sales     Date  IsHoliday  Temperature  Fuel_Price  \\\n",
      "0        1_1      17147.44   5/4/12      False        75.55       3.749   \n",
      "1        1_1      18164.20  5/11/12      False        73.77       3.688   \n",
      "2        1_1      18517.79  5/18/12      False        70.33       3.630   \n",
      "3        1_1      16963.55  5/25/12      False        77.22       3.561   \n",
      "4        1_1      16065.49   6/1/12      False        77.95       3.501   \n",
      "\n",
      "   MarkDown1  MarkDown2  MarkDown3  MarkDown4  MarkDown5         CPI  \\\n",
      "0   21290.13        0.0      69.89    4977.35    3261.04  221.671800   \n",
      "1    8351.40        0.0      10.52    2443.14    3127.88  221.725663   \n",
      "2    6154.14        0.0      45.11    1675.49    5508.18  221.742674   \n",
      "3    4039.39        0.0     745.19    1429.96    3631.13  221.744944   \n",
      "4    6086.21       12.0     370.51     148.75    3690.85  221.747214   \n",
      "\n",
      "   Unemployment    Size Store Dept  Type_A  Type_B  Type_C  Month  \n",
      "0         7.143  151315     1    1       1       0       0      5  \n",
      "1         7.143  151315     1    1       1       0       0      5  \n",
      "2         7.143  151315     1    1       1       0       0      5  \n",
      "3         7.143  151315     1    1       1       0       0      5  \n",
      "4         7.143  151315     1    1       1       0       0      6  \n"
     ]
    }
   ],
   "source": [
    "print(test_file.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_final = test_file.drop(columns=['Date','Store_Dept','Weekly_Sales','Fuel_Price','Type_A','MarkDown1'])\n",
    "y_final = test_file[['Weekly_Sales']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(76903, 14) (76903, 1)\n"
     ]
    }
   ],
   "source": [
    "print(X_final.shape,y_final.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for LR: 2350067862.28\n"
     ]
    }
   ],
   "source": [
    "y_final_pred = lr.predict(X_final)\n",
    "print(\"MSE for LR: %.2f\" %mean_squared_error(y_final,y_final_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for KNN: 308011125.72\n"
     ]
    }
   ],
   "source": [
    "#print(\"KNN\") on test_file\n",
    "y_pred_final = knn.predict(X_final)\n",
    "print(\"MSE for KNN: %.2f\" %mean_squared_error(y_final,y_pred_final))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2 Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset=pd.read_csv(\"master.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset[['Store','Dept']] = dataset.Store_Dept.str.split(\"_\",expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset.IsHoliday = np.multiply(dataset.IsHoliday, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dataset.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store_Dept           0\n",
       "Date                 0\n",
       "Weekly_Sales         0\n",
       "IsHoliday            0\n",
       "Temperature          0\n",
       "Fuel_Price           0\n",
       "MarkDown1       270480\n",
       "MarkDown2       278599\n",
       "MarkDown3       276008\n",
       "MarkDown4       278273\n",
       "MarkDown5       270138\n",
       "CPI                  0\n",
       "Unemployment         0\n",
       "Type                 0\n",
       "Size                 0\n",
       "Store                0\n",
       "Dept                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Weekly_Sales</th>\n",
       "      <th>IsHoliday</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Fuel_Price</th>\n",
       "      <th>MarkDown1</th>\n",
       "      <th>MarkDown2</th>\n",
       "      <th>MarkDown3</th>\n",
       "      <th>MarkDown4</th>\n",
       "      <th>MarkDown5</th>\n",
       "      <th>CPI</th>\n",
       "      <th>Unemployment</th>\n",
       "      <th>Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>74187.000000</td>\n",
       "      <td>66068.000000</td>\n",
       "      <td>68659.000000</td>\n",
       "      <td>66394.000000</td>\n",
       "      <td>74529.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "      <td>344667.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>16011.033071</td>\n",
       "      <td>0.077452</td>\n",
       "      <td>57.391070</td>\n",
       "      <td>3.278793</td>\n",
       "      <td>7377.990937</td>\n",
       "      <td>5520.011830</td>\n",
       "      <td>2812.494829</td>\n",
       "      <td>3867.350763</td>\n",
       "      <td>4841.675275</td>\n",
       "      <td>170.260421</td>\n",
       "      <td>8.119909</td>\n",
       "      <td>136807.198011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22859.611439</td>\n",
       "      <td>0.267307</td>\n",
       "      <td>18.644742</td>\n",
       "      <td>0.454502</td>\n",
       "      <td>9695.184239</td>\n",
       "      <td>11806.737391</td>\n",
       "      <td>13457.720905</td>\n",
       "      <td>8176.212908</td>\n",
       "      <td>5046.201077</td>\n",
       "      <td>38.767201</td>\n",
       "      <td>1.865077</td>\n",
       "      <td>60944.571069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-4988.940000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.060000</td>\n",
       "      <td>2.472000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>-265.760000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.460000</td>\n",
       "      <td>135.160000</td>\n",
       "      <td>126.064000</td>\n",
       "      <td>4.125000</td>\n",
       "      <td>34875.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2100.335000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>43.820000</td>\n",
       "      <td>2.843000</td>\n",
       "      <td>1842.420000</td>\n",
       "      <td>96.520000</td>\n",
       "      <td>5.900000</td>\n",
       "      <td>319.840000</td>\n",
       "      <td>1844.030000</td>\n",
       "      <td>131.940807</td>\n",
       "      <td>7.082000</td>\n",
       "      <td>93638.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7638.860000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>58.060000</td>\n",
       "      <td>3.263000</td>\n",
       "      <td>4879.040000</td>\n",
       "      <td>1053.980000</td>\n",
       "      <td>35.490000</td>\n",
       "      <td>1100.930000</td>\n",
       "      <td>3429.820000</td>\n",
       "      <td>182.238988</td>\n",
       "      <td>7.951000</td>\n",
       "      <td>140167.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>20179.490000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71.240000</td>\n",
       "      <td>3.669000</td>\n",
       "      <td>9006.210000</td>\n",
       "      <td>5524.490000</td>\n",
       "      <td>203.990000</td>\n",
       "      <td>3380.280000</td>\n",
       "      <td>5996.690000</td>\n",
       "      <td>211.406287</td>\n",
       "      <td>8.622000</td>\n",
       "      <td>202505.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>693099.360000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>100.140000</td>\n",
       "      <td>4.294000</td>\n",
       "      <td>88646.760000</td>\n",
       "      <td>104519.540000</td>\n",
       "      <td>141630.610000</td>\n",
       "      <td>67474.850000</td>\n",
       "      <td>37581.270000</td>\n",
       "      <td>225.367254</td>\n",
       "      <td>14.313000</td>\n",
       "      <td>219622.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Weekly_Sales      IsHoliday    Temperature     Fuel_Price  \\\n",
       "count  344667.000000  344667.000000  344667.000000  344667.000000   \n",
       "mean    16011.033071       0.077452      57.391070       3.278793   \n",
       "std     22859.611439       0.267307      18.644742       0.454502   \n",
       "min     -4988.940000       0.000000      -2.060000       2.472000   \n",
       "25%      2100.335000       0.000000      43.820000       2.843000   \n",
       "50%      7638.860000       0.000000      58.060000       3.263000   \n",
       "75%     20179.490000       0.000000      71.240000       3.669000   \n",
       "max    693099.360000       1.000000     100.140000       4.294000   \n",
       "\n",
       "          MarkDown1      MarkDown2      MarkDown3     MarkDown4     MarkDown5  \\\n",
       "count  74187.000000   66068.000000   68659.000000  66394.000000  74529.000000   \n",
       "mean    7377.990937    5520.011830    2812.494829   3867.350763   4841.675275   \n",
       "std     9695.184239   11806.737391   13457.720905   8176.212908   5046.201077   \n",
       "min        0.500000    -265.760000      -1.000000      0.460000    135.160000   \n",
       "25%     1842.420000      96.520000       5.900000    319.840000   1844.030000   \n",
       "50%     4879.040000    1053.980000      35.490000   1100.930000   3429.820000   \n",
       "75%     9006.210000    5524.490000     203.990000   3380.280000   5996.690000   \n",
       "max    88646.760000  104519.540000  141630.610000  67474.850000  37581.270000   \n",
       "\n",
       "                 CPI   Unemployment           Size  \n",
       "count  344667.000000  344667.000000  344667.000000  \n",
       "mean      170.260421       8.119909  136807.198011  \n",
       "std        38.767201       1.865077   60944.571069  \n",
       "min       126.064000       4.125000   34875.000000  \n",
       "25%       131.940807       7.082000   93638.000000  \n",
       "50%       182.238988       7.951000  140167.000000  \n",
       "75%       211.406287       8.622000  202505.000000  \n",
       "max       225.367254      14.313000  219622.000000  "
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset=dataset.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store_Dept      0\n",
       "Date            0\n",
       "Weekly_Sales    0\n",
       "IsHoliday       0\n",
       "Temperature     0\n",
       "Fuel_Price      0\n",
       "MarkDown1       0\n",
       "MarkDown2       0\n",
       "MarkDown3       0\n",
       "MarkDown4       0\n",
       "MarkDown5       0\n",
       "CPI             0\n",
       "Unemployment    0\n",
       "Type            0\n",
       "Size            0\n",
       "Store           0\n",
       "Dept            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "X2 = dataset.drop(columns=['Date','Store_Dept','Type'])\n",
    "y2 = dataset[['Type']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X2, y2, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive-Bayes Classifier\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "#initialize your classifier\n",
    "print(\"Naive-Bayes Classifier\")\n",
    "nb = BernoulliNB()\n",
    "\n",
    "#fit your classifier to training set\n",
    "nb = nb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "#use your classifier to predict on the test Set : X_test, save it to a temporary variable y_pred\n",
    "y_pred = nb.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.36\n",
      "Recall:  0.33\n",
      "F1-score:  0.23\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "#compare y_pred with actual targets for your test set(y_test) and calculate precision, recall, f1-score\n",
    "print(\"Precision: %0.2f\" %precision_score(y_test, y_pred , average=\"macro\"))\n",
    "print(\"Recall:  %0.2f\" %recall_score(y_test, y_pred , average=\"macro\"))\n",
    "print(\"F1-score:  %0.2f\" %f1_score(y_test, y_pred , average=\"macro\"))\n",
    "#compute recall and f1-score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[35211    76     0]\n",
      " [26664   120     0]\n",
      " [ 6843    20     0]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           A       0.51      1.00      0.68     35287\n",
      "           B       0.56      0.00      0.01     26784\n",
      "           C       0.00      0.00      0.00      6863\n",
      "\n",
      "    accuracy                           0.51     68934\n",
      "   macro avg       0.36      0.33      0.23     68934\n",
      "weighted avg       0.48      0.51      0.35     68934\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "test2 = pd.read_csv(\"test.csv\")\n",
    "test2[['Store','Dept']] = test.Store_Dept.str.split(\"_\",expand=True)\n",
    "test2.IsHoliday = np.multiply(test.IsHoliday, 1)\n",
    "test2.fillna(0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test2 = test2.drop(columns=['Date','Store_Dept','Type'])\n",
    "y_test2 = test2[['Type']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred2 = nb.predict(x_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.35\n",
      "Recall:  0.33\n",
      "F1-score:  0.23\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "#compare y_pred with actual targets for your test set(y_test) and calculate precision, recall, f1-score\n",
    "print(\"Precision: %0.2f\" %precision_score(y_test2, y_pred2 , average=\"macro\"))\n",
    "print(\"Recall:  %0.2f\" %recall_score(y_test2, y_pred2 , average=\"macro\"))\n",
    "print(\"F1-score:  %0.2f\" %f1_score(y_test2, y_pred2 , average=\"macro\"))\n",
    "#compute recall and f1-score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## decision trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Classifier\n"
     ]
    }
   ],
   "source": [
    "print(\"Decision Tree Classifier\")\n",
    "clf = tree.DecisionTreeClassifier()\n",
    "clf = clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 1.00\n",
      "Recall:  1.00\n",
      "F1-score:  1.00\n"
     ]
    }
   ],
   "source": [
    "y_pred = clf.predict(X_test)\n",
    "print(\"Precision: %0.2f\" %precision_score(y_test, y_pred , average=\"macro\"))\n",
    "print(\"Recall:  %0.2f\" %recall_score(y_test, y_pred , average=\"macro\"))\n",
    "print(\"F1-score:  %0.2f\" %f1_score(y_test, y_pred , average=\"macro\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[35287     0     0]\n",
      " [    0 26784     0]\n",
      " [    0     0  6863]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           A       1.00      1.00      1.00     35287\n",
      "           B       1.00      1.00      1.00     26784\n",
      "           C       1.00      1.00      1.00      6863\n",
      "\n",
      "    accuracy                           1.00     68934\n",
      "   macro avg       1.00      1.00      1.00     68934\n",
      "weighted avg       1.00      1.00      1.00     68934\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred2 = clf.predict(x_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 1.00\n",
      "Recall:  1.00\n",
      "F1-score:  1.00\n"
     ]
    }
   ],
   "source": [
    "#compare y_pred with actual targets for your test set(y_test) and calculate precision, recall, f1-score\n",
    "print(\"Precision: %0.2f\" %precision_score(y_test2, y_pred2 , average=\"macro\"))\n",
    "print(\"Recall:  %0.2f\" %recall_score(y_test2, y_pred2 , average=\"macro\"))\n",
    "print(\"F1-score:  %0.2f\" %f1_score(y_test2, y_pred2 , average=\"macro\"))\n",
    "#compute recall and f1-score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive bayes with CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive-Bayes Classifier\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.46 (+/- 0.08)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recall: 0.51 (+/- 0.00)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "//anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:724: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1-score: 0.35 (+/- 0.00)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "print(\"Naive-Bayes Classifier\")\n",
    "nb = BernoulliNB()\n",
    "#scores = cross_val_score(nb, X, y, cv=5, scoring=scoring)\n",
    "print(\"Precision: %0.2f (+/- %0.2f)\" % (cross_val_score(nb, X2, y2, cv=10, scoring='precision_weighted').mean(), cross_val_score(nb, X2, y2, cv=10, scoring='precision_weighted').std() * 2))\n",
    "print(\"Recall: %0.2f (+/- %0.2f)\" % (cross_val_score(nb, X2, y2, cv=10, scoring='recall_weighted').mean(), cross_val_score(nb, X2, y2, cv=10, scoring='recall_weighted').std() * 2))\n",
    "print(\"F1-score: %0.2f (+/- %0.2f)\" % (cross_val_score(nb, X2, y2, cv=10, scoring='f1_weighted').mean(), cross_val_score(nb, X2, y2, cv=10, scoring='f1_weighted').std() * 2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Tree with CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Classifier\n",
      "Precision: 0.98 (+/- 0.06)\n",
      "Recall: 0.95 (+/- 0.15)\n",
      "F1-score: 0.95 (+/- 0.15)\n"
     ]
    }
   ],
   "source": [
    "#Repeat the same steps for DecisionTree Classifier\n",
    "print(\"Decision Tree Classifier\")\n",
    "clf = tree.DecisionTreeClassifier()\n",
    "print(\"Precision: %0.2f (+/- %0.2f)\" % (cross_val_score(clf, X2, y2, cv=10, scoring='precision_weighted').mean(), cross_val_score(clf, X2, y2, cv=10, scoring='precision_weighted').std() * 2))\n",
    "print(\"Recall: %0.2f (+/- %0.2f)\" % (cross_val_score(clf, X2, y2, cv=10, scoring='recall_weighted').mean(), cross_val_score(clf, X2, y2, cv=10, scoring='recall_weighted').std() * 2))\n",
    "print(\"F1-score: %0.2f (+/- %0.2f)\" % (cross_val_score(clf, X2, y2, cv=10, scoring='f1_weighted').mean(), cross_val_score(clf, X2, y2, cv=10, scoring='f1_weighted').std() * 2))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "test2=pd.read_csv(\"test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "test2[['Store','Dept']] = test2.Store_Dept.str.split(\"_\",expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "test2.IsHoliday = np.multiply(test2.IsHoliday, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "test2=test2.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store_Dept      0\n",
       "Weekly_Sales    0\n",
       "Date            0\n",
       "IsHoliday       0\n",
       "Temperature     0\n",
       "Fuel_Price      0\n",
       "MarkDown1       0\n",
       "MarkDown2       0\n",
       "MarkDown3       0\n",
       "MarkDown4       0\n",
       "MarkDown5       0\n",
       "CPI             0\n",
       "Unemployment    0\n",
       "Type            0\n",
       "Size            0\n",
       "Store           0\n",
       "Dept            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test2.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_X2 = test.drop(columns=['Date','Store_Dept','Type'])\n",
    "test_y2 = test[['Type']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# part 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets.samples_generator import make_blobs\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.preprocessing import MinMaxScaler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X, y = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)plt.scatter(X[:,0], X[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "mms = MinMaxScaler()\n",
    "mms.fit(X)\n",
    "data_transformed = mms.transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "Sum_of_squared_distances = []\n",
    "K = range(1,15)\n",
    "for k in K:\n",
    "    km = KMeans(n_clusters=k)\n",
    "    km = km.fit(data_transformed)\n",
    "    Sum_of_squared_distances.append(km.inertia_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAESCAYAAADXMlMiAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAgAElEQVR4nO3deXiM9/rH8fczk0z2iNRSVNSW2mqN2CItGrpQip9EKq1DtZxWG7ogtR4c7VHRlipSuiiCotpyquUgQoXaq9WSWIrGFksyWWfm+f0xzZCWmJhMJpO5X9eVq5nJNzMfU+ae57sqqqqqCCGEEHdJ4+gAQgghnJsUEiGEEDaRQiKEEMImUkiEEELYRAqJEEIIm0ghEUIIYRMpJMLuHnjgAXr16kXv3r2LfJ05c4aUlBR69uwJwNixY1m0aJFds6SkpPDAAw8wZsyYv/0sJiaGVq1a3fExDh06xMSJEy2PV5j/bmVkZPDAAw/c8mcxMTF07dr1b6+drX7//XdGjRrFI488wpNPPkn//v354osvrPrdrVu38t577wGwefNmpk2bZnMegDNnztzy9b/d/aL8cHN0AOEaPv30UwIDA/92/9mzZ8s8S9WqVdmyZQs5OTl4eXlZcpw4ccKq3z9+/Djnz5+3Z8Qi3njjDR599NFSe7wzZ84waNAgYmNjiY+PR1EUzp8/z2uvvcapU6d49dVXi/39w4cPc+3aNQC6detGt27dSi2bcE5SSES5snfvXjZu3EhWVhadOnVizJgxuLm58eOPP/Kf//yHnJwc3N3diY2NpVOnTnTq1IkVK1ZQp04dFixYQGJiIlu2bAFg8ODB/OMf/+Chhx4q8hwBAQHUrl2bTZs20atXLwC+/PJLevXqRWJioqXdqlWrWL58OSaTiYCAACZMmIC3tzfvv/8+mZmZjBs3jj59+pCdnc2oUaNIS0sjLy+PadOmERISQmZmJlOmTOHo0aMoikLnzp0ZPXo0bm5ufPfdd8yePRsvLy+aNWt2V69Veno6kydP5uzZs6iqSp8+fXjuuec4c+YMTz/9NPXr1+fs2bMsWbKEatWqWX5v4cKF9OzZk6eeespyX/Xq1Zk9ezbdunUjJiaG5ORkvv32W0wmE+fOnaN69eq89dZbpKenk5iYiNFoxM/Pjzp16rBx40YWLFhATEwMTZs25cCBA2RkZDBgwAAuXbrE7t27ycnJ4d133+WBBx7gwIEDzJw5k/z8fC5evEjHjh3597//bdWfOTU1lWHDhjFu3DgiIiLu6nUTdqAKYWfBwcFqz5491SeffNLy9c9//lNVVVXdtWuX+sQTT6iqqqpjxoxRn3rqKVWv16t5eXnqoEGD1KVLl6oZGRlqhw4d1AMHDqiqqqq//fabGhoaqp4+fVodO3asumTJElVVVfXpp59WO3XqpKalpanXr19X27Vrp+bl5RXJUvh83377rTp06FDL/U888YT6008/qS1btlRVVVVTUlLU6OhoNTs7W1VVVd2+fbv66KOPqqqqqqtXr1aff/55y+M1btzYku3jjz9Wn3nmGVVVVfWNN95Qp06dqppMJjUvL08dMmSIumDBAvXixYtqmzZt1GPHjqmqqqrz589Xg4ODb/naDRo0SO3SpUuR127r1q2WP+/ixYtVVVXV69evq7169VK/+eYb9ffff1eDg4PVPXv23PIxe/bsqW7ZsuWWP3vqqafU7777Tl29erXasmVLNS0tTVVVVZ05c6Y6cuRIVVVV9f3331enTJnyt9di0KBB6ksvvaSqqqoeOHBADQ4OVjdv3qyqqqpOnz5dHT9+vKqqqjpq1Ch1165dqqqqalZWltquXTv18OHD6u+//255/W9WeP+vv/6qPvLII+rOnTtvmV04jlyRiDJxu66tv+rduzfe3t4APPnkk2zbto1atWoRFBREixYtAGjYsCGtW7dm9+7dREREkJiYSJ8+fbh48SI9e/Zk586dVKpUic6dO6PT6W75PF26dGHy5MlcunSJU6dOUa9ePSpVqmT5+datWzl16hRRUVGW+65fv87Vq1f/9li1a9e2ZGvUqBGrV68GICkpieXLl6MoCjqdjqioKD799FPq1KlDcHAwDRo0ACAyMpL4+Pjbvia36trKzs5m3759LF68GAA/Pz/69u1LUlISLVq0wM3NjZYtW972MQ0Gwy3vz8/PR1EUADp16kTdunUBGDBggFVjM4VXCbVr1wagc+fOAAQFBbF7924A3nrrLZKSkpg/f77lKi47O5uAgIDbPm5+fj7PPPMMoaGhdOjQ4Y45RNmSwXZRrmi1Wsv3qqri5uaG0Wi0vLnd/DODwUCnTp346aef2LZtG+3ataNjx44kJyfzv//9jx49etz2eXQ6Hd27d2f9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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(K, Sum_of_squared_distances, 'bx-')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Sum_of_squared_distances')\n",
    "plt.title('Elbow Method For Optimal k')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "wcss = []\n",
    "for i in range(1, 11):\n",
    "    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)\n",
    "    kmeans.fit(X)\n",
    "    wcss.append(kmeans.inertia_)\n",
    "plt.plot(range(1, 11), wcss)\n",
    "plt.title('Elbow Method')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('WCSS')\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
